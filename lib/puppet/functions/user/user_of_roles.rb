# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# user_of_roles.rb
#
# Alexander Schrapel <ndealex@gmail.com>
#
# ---- original file header ----
#
# @summary
#     Returned a list of all user are member of given roles.
#
#  Parameter:
#    1. Array of roles
#    2. Boolean (optional) - If true return only user with login rights.
#
#
#
Puppet::Functions.create_function(:'user::user_of_roles') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "role_users(): The argument must be an array") if (arguments.size < 1) or (!arguments[0].kind_of?(Array))

    all = Array.new
    arguments[0].each do |role|
      all += call_function('hiera_array', ["user_role_#{role}", []] )
    end
    # remove duplicates
    all.uniq!

    # check of login role
    if (arguments.size > 1) and (arguments[1] == true)
      allowed_users = Array.new
      allowed_roles = call_function('hiera_array', ['user_login_roles', []])
      allowed_roles.each do |role|
        allowed_users += call_function('hiera_array', ["user_role_#{role}", []] )
      end
      all = all & allowed_users
    end

    return all
  
  end
end
