# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# user_to_remove.rb
#
# Alexander Schrapel <ndealex@gmail.com>
#
# ---- original file header ----
#
# @summary
#     TODO: Doku
#
#
Puppet::Functions.create_function(:'user::user_to_remove') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "user_to_remove(): The argument must be an array") if (arguments.size < 1) or (!arguments[0].kind_of?(Array))

    to_remove = []
    ignore = []
    all = arguments[0]
    ignore = arguments[1] if arguments.length > 1


    users = lookupvar("::system_accounts")
    if not users.nil?
      users.each do |user, value|
        to_remove << user if (ignore.include?(user) == false) and (all.include?(user) == false)
      end
    else
      return nil
    end
    return to_remove
  
  end
end
